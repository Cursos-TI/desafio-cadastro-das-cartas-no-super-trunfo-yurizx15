#include <stdio.h>

#define TAM 10      // Tamanho do tabuleiro
#define AGUA 0      // Representa água
#define NAVIO 3     // Representa navio
#define HABILIDADE 5 // Representa área afetada pela habilidade

// Função para imprimir o tabuleiro
void imprimirTabuleiro(int tabuleiro[TAM][TAM]) {
    int i, j;
    printf("\n=== TABULEIRO - HABILIDADES ESPECIAIS ===\n\n");

    // Cabeçalho das colunas
    printf("   ");
    for (j = 0; j < TAM; j++)
        printf("%2d", j);
    printf("\n");

    for (i = 0; i < TAM; i++) {
        printf("%2d ", i);
        for (j = 0; j < TAM; j++) {
            printf("%2d", tabuleiro[i][j]);
        }
        printf("\n");
    }

    printf("\nLegenda: 0 = Água | 3 = Navio | 5 = Habilidade\n");
}

int main() {
    int tabuleiro[TAM][TAM];
    int i, j;

    // ===== 1. Inicializa o tabuleiro com água =====
    for (i = 0; i < TAM; i++) {
        for (j = 0; j < TAM; j++) {
            tabuleiro[i][j] = AGUA;
        }
    }

    // ===== 2. Posiciona navios (mantendo 4 navios do nível anterior) =====
    int linhaH = 2, colunaH = 4;
    int linhaV = 6, colunaV = 1;
    int linhaD1 = 1, colunaD1 = 1;
    int linhaD2 = 1, colunaD2 = 8;

    for (i = 0; i < 3; i++) tabuleiro[linhaH][colunaH + i] = NAVIO;       // Horizontal
    for (i = 0; i < 3; i++) tabuleiro[linhaV + i][colunaV] = NAVIO;       // Vertical
    for (i = 0; i < 3; i++) tabuleiro[linhaD1 + i][colunaD1 + i] = NAVIO; // Diagonal ↘
    for (i = 0; i < 3; i++) tabuleiro[linhaD2 + i][colunaD2 - i] = NAVIO; // Diagonal ↙

    // ===== 3. Matrizes das habilidades (5x5) =====
    int cone[5][5];
    int cruz[5][5];
    int octaedro[5][5];

    // ===== 3.1 Preenche a matriz CONE =====
    // O cone tem o topo estreito e se alarga para baixo.
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            if (j >= 2 - i && j <= 2 + i && i < 3) // Forma de triângulo
                cone[i][j] = 1;
            else if (i >= 3)                       // As linhas inferiores são completamente cheias
                cone[i][j] = 1;
            else
                cone[i][j] = 0;
        }
    }

    // ===== 3.2 Preenche a matriz CRUZ =====
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            if (i == 2 || j == 2) // Linha e coluna do meio
                cruz[i][j] = 1;
            else
                cruz[i][j] = 0;
        }
    }

    // ===== 3.3 Preenche a matriz OCTAEDRO =====
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            if (abs(2 - i) + abs(2 - j) <= 2) // Fórmula de distância Manhattan para losango
                octaedro[i][j] = 1;
            else
                octaedro[i][j] = 0;
        }
    }

    // ===== 4. Pontos de origem das habilidades no tabuleiro =====
    int origemCone[2] = {4, 4};     // linha, coluna
    int origemCruz[2] = {7, 7};
    int origemOctaedro[2] = {4, 1};

    // ===== 5. Sobrepõe as habilidades no tabuleiro =====
    // Função geral: percorre a matriz de habilidade e aplica no tabuleiro
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {

            // === Cone ===
            int linhaT = origemCone[0] - 2 + i;  // centraliza a matriz no ponto
            int colunaT = origemCone[1] - 2 + j;
            if (linhaT >= 0 && linhaT < TAM && colunaT >= 0 && colunaT < TAM && cone[i][j] == 1) {
                if (tabuleiro[linhaT][colunaT] == AGUA)
                    tabuleiro[linhaT][colunaT] = HABILIDADE;
            }

            // === Cruz ===
            linhaT = origemCruz[0] - 2 + i;
            colunaT = origemCruz[1] - 2 + j;
            if (linhaT >= 0 && linhaT < TAM && colunaT >= 0 && colunaT < TAM && cruz[i][j] == 1) {
                if (tabuleiro[linhaT][colunaT] == AGUA)
                    tabuleiro[linhaT][colunaT] = HABILIDADE;
            }

            // === Octaedro ===
            linhaT = origemOctaedro[0] - 2 + i;
            colunaT = origemOctaedro[1] - 2 + j;
            if (linhaT >= 0 && linhaT < TAM && colunaT >= 0 && colunaT < TAM && octaedro[i][j] == 1) {
                if (tabuleiro[linhaT][colunaT] == AGUA)
                    tabuleiro[linhaT][colunaT] = HABILIDADE;
            }
        }
    }

    // ===== 6. Exibe o tabuleiro final =====
    imprimirTabuleiro(tabuleiro);

    return 0;
}


